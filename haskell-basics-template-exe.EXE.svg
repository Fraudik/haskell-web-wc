<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="758.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="741" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="741" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Type.readOutputQ (995 samples, 99.50%)</title><rect x="11.2" y="421" width="1174.1" height="15.0" fill="rgb(242,71,33)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="431.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Type.readOutputQ</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.check.\ (1 samples, 0.10%)</title><rect x="10.0" y="293" width="1.2" height="15.0" fill="rgb(208,2,54)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Main.startServer (996 samples, 99.60%)</title><rect x="10.0" y="677" width="1175.3" height="15.0" fill="rgb(253,11,9)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="687.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Main.startServer</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.serve (996 samples, 99.60%)</title><rect x="10.0" y="565" width="1175.3" height="15.0" fill="rgb(215,64,1)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="575.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Servant.Server.serve</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.$mStream.\ (929 samples, 92.90%)</title><rect x="44.2" y="229" width="1096.2" height="15.0" fill="rgb(243,134,52)" rx="2" ry="2" />
<text text-anchor="" x="47.22" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Type.$mStream.\</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processHeap.loopHeap (26 samples, 2.60%)</title><rect x="13.5" y="245" width="30.7" height="15.0" fill="rgb(224,54,28)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >St..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk (909 samples, 90.90%)</title><rect x="67.8" y="181" width="1072.6" height="15.0" fill="rgb(224,168,46)" rx="2" ry="2" />
<text text-anchor="" x="70.82" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >WordCount.processChunk</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithoutToken.mrun (2 samples, 0.20%)</title><rect x="11.2" y="309" width="2.3" height="15.0" fill="rgb(237,16,15)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithToken (929 samples, 92.90%)</title><rect x="44.2" y="245" width="1096.2" height="15.0" fill="rgb(248,157,20)" rx="2" ry="2" />
<text text-anchor="" x="47.22" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Append.processWithToken</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.tempFileBackEndOpts (1 samples, 0.10%)</title><rect x="10.0" y="149" width="1.2" height="15.0" fill="rgb(217,110,26)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.wrapTillBound.go.push (1 samples, 0.10%)</title><rect x="10.0" y="85" width="1.2" height="15.0" fill="rgb(225,66,12)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Monad.Trans.Resource.Internal.&gt;&gt;=.\ (1 samples, 0.10%)</title><rect x="10.0" y="421" width="1.2" height="15.0" fill="rgb(240,139,10)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="431.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Monad.Trans.Resource.Internal.&gt;&gt;= (1 samples, 0.10%)</title><rect x="10.0" y="437" width="1.2" height="15.0" fill="rgb(239,199,21)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="447.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithoutToken (2 samples, 0.20%)</title><rect x="11.2" y="325" width="2.3" height="15.0" fill="rgb(241,151,8)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.addMultipartHandling.bodyCheck (1 samples, 0.10%)</title><rect x="10.0" y="341" width="1.2" height="15.0" fill="rgb(213,32,34)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.Internal.methodRouter (1 samples, 0.10%)</title><rect x="10.0" y="485" width="1.2" height="15.0" fill="rgb(243,175,9)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="495.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare (929 samples, 92.90%)</title><rect x="44.2" y="213" width="1096.2" height="15.0" fill="rgb(254,166,30)" rx="2" ry="2" />
<text text-anchor="" x="47.22" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Type.unShare</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare (2 samples, 0.20%)</title><rect x="11.2" y="245" width="2.3" height="15.0" fill="rgb(232,2,54)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk (25 samples, 2.50%)</title><rect x="14.7" y="101" width="29.5" height="15.0" fill="rgb(249,64,51)" rx="2" ry="2" />
<text text-anchor="" x="17.72" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Wo..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Unbox.peekAt.\ (1 samples, 0.10%)</title><rect x="1085.0" y="133" width="1.2" height="15.0" fill="rgb(211,114,50)" rx="2" ry="2" />
<text text-anchor="" x="1087.98" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processHeap.loopHeap.action (26 samples, 2.60%)</title><rect x="13.5" y="213" width="30.7" height="15.0" fill="rgb(237,58,22)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >St..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Unbox.peekAt (11 samples, 1.10%)</title><rect x="1073.2" y="149" width="13.0" height="15.0" fill="rgb(225,191,37)" rx="2" ry="2" />
<text text-anchor="" x="1076.18" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Operations.fromChannelRaw.\ (995 samples, 99.50%)</title><rect x="11.2" y="437" width="1174.1" height="15.0" fill="rgb(235,145,41)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="447.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Operations.fromChannelRaw.\</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.isSpace (1 samples, 0.10%)</title><rect x="43.0" y="37" width="1.2" height="15.0" fill="rgb(219,29,31)" rx="2" ry="2" />
<text text-anchor="" x="46.04" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Type.svarMrun (993 samples, 99.30%)</title><rect x="13.5" y="309" width="1171.8" height="15.0" fill="rgb(205,20,13)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Type.svarMrun</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithoutToken (25 samples, 2.50%)</title><rect x="14.7" y="181" width="29.5" height="15.0" fill="rgb(214,103,31)" rx="2" ry="2" />
<text text-anchor="" x="17.72" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >St..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Monad.Trans.Resource.runResourceT.\.\ (996 samples, 99.60%)</title><rect x="10.0" y="581" width="1175.3" height="15.0" fill="rgb(226,89,13)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="591.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Monad.Trans.Resource.runResourceT.\.\</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.conduitRequestBodyEx (1 samples, 0.10%)</title><rect x="10.0" y="245" width="1.2" height="15.0" fill="rgb(235,203,39)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.findBound (1 samples, 0.10%)</title><rect x="10.0" y="69" width="1.2" height="15.0" fill="rgb(252,73,15)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.backend (1 samples, 0.10%)</title><rect x="10.0" y="181" width="1.2" height="15.0" fill="rgb(226,35,2)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithToken (1 samples, 0.10%)</title><rect x="1184.1" y="229" width="1.2" height="15.0" fill="rgb(228,0,16)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Consumer.readOutputQBounded (993 samples, 99.30%)</title><rect x="13.5" y="357" width="1171.8" height="15.0" fill="rgb(250,36,12)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Consumer.readOutputQBounded</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Dispatcher.forkWorker (993 samples, 99.30%)</title><rect x="13.5" y="325" width="1171.8" height="15.0" fill="rgb(218,107,36)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Dispatcher.forkWorker</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.Internal.route (1 samples, 0.10%)</title><rect x="10.0" y="501" width="1.2" height="15.0" fill="rgb(225,202,24)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="511.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithoutToken (1 samples, 0.10%)</title><rect x="1184.1" y="245" width="1.2" height="15.0" fill="rgb(232,78,29)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Type.svarMrun (2 samples, 0.20%)</title><rect x="11.2" y="293" width="2.3" height="15.0" fill="rgb(217,29,3)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.newAppendChannel (995 samples, 99.50%)</title><rect x="11.2" y="405" width="1174.1" height="15.0" fill="rgb(239,9,26)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Append.newAppendChannel</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk (1 samples, 0.10%)</title><rect x="13.5" y="117" width="1.2" height="15.0" fill="rgb(250,117,8)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk.countChunkElements (862 samples, 86.20%)</title><rect x="123.3" y="165" width="1017.1" height="15.0" fill="rgb(245,108,8)" rx="2" ry="2" />
<text text-anchor="" x="126.28" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >WordCount.processChunk.countChunkElements</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Main.upload (995 samples, 99.50%)</title><rect x="11.2" y="485" width="1174.1" height="15.0" fill="rgb(218,139,16)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="495.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Main.upload</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.workLoopAhead (955 samples, 95.50%)</title><rect x="13.5" y="277" width="1126.9" height="15.0" fill="rgb(228,2,42)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Append.workLoopAhead</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare.step' (1 samples, 0.10%)</title><rect x="1184.1" y="181" width="1.2" height="15.0" fill="rgb(215,196,7)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.$mStream.\ (37 samples, 3.70%)</title><rect x="1140.4" y="277" width="43.7" height="15.0" fill="rgb(247,192,39)" rx="2" ry="2" />
<text text-anchor="" x="1143.44" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Stre..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar.getSVar (2 samples, 0.20%)</title><rect x="11.2" y="357" width="2.3" height="15.0" fill="rgb(239,92,20)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar.getSVar (1 samples, 0.10%)</title><rect x="1184.1" y="277" width="1.2" height="15.0" fill="rgb(211,48,8)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.parsePiecesEx.loop (1 samples, 0.10%)</title><rect x="10.0" y="213" width="1.2" height="15.0" fill="rgb(247,121,7)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Handler.Warp.Run.run (996 samples, 99.60%)</title><rect x="10.0" y="661" width="1175.3" height="15.0" fill="rgb(230,70,26)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="671.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Network.Wai.Handler.Warp.Run.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Monad.Trans.Resource.Internal.&gt;&gt;=.\.(...) (1 samples, 0.10%)</title><rect x="10.0" y="389" width="1.2" height="15.0" fill="rgb(216,7,12)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.wrapTillBound (1 samples, 0.10%)</title><rect x="10.0" y="117" width="1.2" height="15.0" fill="rgb(240,43,25)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.hoistServerWithContext (995 samples, 99.50%)</title><rect x="11.2" y="501" width="1174.1" height="15.0" fill="rgb(252,209,15)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="511.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Servant.Multipart.hoistServerWithContext</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk (1 samples, 0.10%)</title><rect x="1184.1" y="165" width="1.2" height="15.0" fill="rgb(247,153,14)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.countElements (995 samples, 99.50%)</title><rect x="11.2" y="469" width="1174.1" height="15.0" fill="rgb(211,198,47)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="479.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >WordCount.countElements</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare (1 samples, 0.10%)</title><rect x="1184.1" y="197" width="1.2" height="15.0" fill="rgb(235,192,19)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.$mStream.\ (1 samples, 0.10%)</title><rect x="1184.1" y="213" width="1.2" height="15.0" fill="rgb(219,38,33)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChar.(...) (2 samples, 0.20%)</title><rect x="41.9" y="53" width="2.3" height="15.0" fill="rgb(229,197,32)" rx="2" ry="2" />
<text text-anchor="" x="44.86" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.Internal.RouteResult.&gt;&gt;= (1 samples, 0.10%)</title><rect x="10.0" y="405" width="1.2" height="15.0" fill="rgb(248,111,2)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk (36 samples, 3.60%)</title><rect x="1141.6" y="229" width="42.5" height="15.0" fill="rgb(234,159,15)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Word..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Handler.Warp.Run.runSettings (996 samples, 99.60%)</title><rect x="10.0" y="645" width="1175.3" height="15.0" fill="rgb(213,16,22)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="655.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Network.Wai.Handler.Warp.Run.runSettings</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare (37 samples, 3.70%)</title><rect x="1140.4" y="261" width="43.7" height="15.0" fill="rgb(210,130,18)" rx="2" ry="2" />
<text text-anchor="" x="1143.44" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Stre..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.serveWithContextT (996 samples, 99.60%)</title><rect x="10.0" y="533" width="1175.3" height="15.0" fill="rgb(226,41,27)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="543.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Servant.Server.serveWithContextT</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.check (1 samples, 0.10%)</title><rect x="10.0" y="309" width="1.2" height="15.0" fill="rgb(216,39,9)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Unbox.peekAt (1 samples, 0.10%)</title><rect x="37.1" y="69" width="1.2" height="15.0" fill="rgb(248,60,35)" rx="2" ry="2" />
<text text-anchor="" x="40.14" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Monad.IO.Unlift.withRunInIO (996 samples, 99.60%)</title><rect x="10.0" y="613" width="1175.3" height="15.0" fill="rgb(232,147,10)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="623.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Monad.IO.Unlift.withRunInIO</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.sinkTillBound' (1 samples, 0.10%)</title><rect x="10.0" y="197" width="1.2" height="15.0" fill="rgb(243,178,45)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk.countChunkElements (2 samples, 0.20%)</title><rect x="11.2" y="197" width="2.3" height="15.0" fill="rgb(239,202,31)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>UnliftIO.Exception.bracket (996 samples, 99.60%)</title><rect x="10.0" y="629" width="1175.3" height="15.0" fill="rgb(248,41,45)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="639.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >UnliftIO.Exception.bracket</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChar (5 samples, 0.50%)</title><rect x="38.3" y="69" width="5.9" height="15.0" fill="rgb(222,94,14)" rx="2" ry="2" />
<text text-anchor="" x="41.32" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.addMultipartHandling (1 samples, 0.10%)</title><rect x="10.0" y="357" width="1.2" height="15.0" fill="rgb(219,206,20)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (1,000 samples, 100%)</title><rect x="10.0" y="709" width="1180.0" height="15.0" fill="rgb(218,47,9)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="719.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithToken (25 samples, 2.50%)</title><rect x="14.7" y="165" width="29.5" height="15.0" fill="rgb(214,89,15)" rx="2" ry="2" />
<text text-anchor="" x="17.72" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >St..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.Internal.Delayed.runAction (1 samples, 0.10%)</title><rect x="10.0" y="453" width="1.2" height="15.0" fill="rgb(220,45,37)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="463.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar (995 samples, 99.50%)</title><rect x="11.2" y="389" width="1174.1" height="15.0" fill="rgb(244,203,23)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.backend.tmpBackend (1 samples, 0.10%)</title><rect x="10.0" y="165" width="1.2" height="15.0" fill="rgb(228,30,8)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.sinkRequestBodyEx (1 samples, 0.10%)</title><rect x="10.0" y="261" width="1.2" height="15.0" fill="rgb(243,145,19)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Operations.fromChannelRaw (995 samples, 99.50%)</title><rect x="11.2" y="453" width="1174.1" height="15.0" fill="rgb(214,46,34)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="463.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Operations.fromChannelRaw</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.$mStream.\ (1 samples, 0.10%)</title><rect x="13.5" y="165" width="1.2" height="15.0" fill="rgb(217,113,28)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare (1 samples, 0.10%)</title><rect x="13.5" y="149" width="1.2" height="15.0" fill="rgb(251,105,50)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.addMultipartHandling.bodyCheck.\ (1 samples, 0.10%)</title><rect x="10.0" y="325" width="1.2" height="15.0" fill="rgb(228,108,13)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare.step' (2 samples, 0.20%)</title><rect x="11.2" y="229" width="2.3" height="15.0" fill="rgb(253,73,36)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.route (1 samples, 0.10%)</title><rect x="10.0" y="517" width="1.2" height="15.0" fill="rgb(229,177,24)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="527.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.workLoopAhead (2 samples, 0.20%)</title><rect x="11.2" y="341" width="2.3" height="15.0" fill="rgb(242,214,20)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare.step' (36 samples, 3.60%)</title><rect x="1141.6" y="245" width="42.5" height="15.0" fill="rgb(238,60,19)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Stre..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar.sv (995 samples, 99.50%)</title><rect x="11.2" y="373" width="1174.1" height="15.0" fill="rgb(219,163,30)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar.sv</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare.step' (1 samples, 0.10%)</title><rect x="13.5" y="133" width="1.2" height="15.0" fill="rgb(234,107,48)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processHeap (26 samples, 2.60%)</title><rect x="13.5" y="261" width="30.7" height="15.0" fill="rgb(209,164,11)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >St..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.Internal.methodRouter.route' (1 samples, 0.10%)</title><rect x="10.0" y="469" width="1.2" height="15.0" fill="rgb(236,69,6)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="479.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>MAIN.MAIN (996 samples, 99.60%)</title><rect x="10.0" y="693" width="1175.3" height="15.0" fill="rgb(215,58,10)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="703.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >MAIN.MAIN</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Multipart.route.subserver' (1 samples, 0.10%)</title><rect x="10.0" y="373" width="1.2" height="15.0" fill="rgb(212,6,35)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk (2 samples, 0.20%)</title><rect x="11.2" y="213" width="2.3" height="15.0" fill="rgb(224,164,40)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>UNKNOWN (4 samples, 0.40%)</title><rect x="1185.3" y="693" width="4.7" height="15.0" fill="rgb(241,57,46)" rx="2" ry="2" />
<text text-anchor="" x="1188.28" y="703.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.serveWithContextT.router (995 samples, 99.50%)</title><rect x="11.2" y="517" width="1174.1" height="15.0" fill="rgb(214,72,9)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="527.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Servant.Server.serveWithContextT.router</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.unShare.step' (916 samples, 91.60%)</title><rect x="59.6" y="197" width="1080.8" height="15.0" fill="rgb(207,191,54)" rx="2" ry="2" />
<text text-anchor="" x="62.56" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Type.unShare.step'</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.tempFileBackEndOpts.\ (1 samples, 0.10%)</title><rect x="10.0" y="133" width="1.2" height="15.0" fill="rgb(212,150,15)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk.countChunkElements (1 samples, 0.10%)</title><rect x="13.5" y="101" width="1.2" height="15.0" fill="rgb(221,91,41)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk.countChunkElements (1 samples, 0.10%)</title><rect x="1184.1" y="149" width="1.2" height="15.0" fill="rgb(237,83,25)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChar (2 samples, 0.20%)</title><rect x="1181.7" y="197" width="2.4" height="15.0" fill="rgb(247,84,11)" rx="2" ry="2" />
<text text-anchor="" x="1184.74" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.$mStream.\ (2 samples, 0.20%)</title><rect x="11.2" y="261" width="2.3" height="15.0" fill="rgb(241,91,28)" rx="2" ry="2" />
<text text-anchor="" x="14.18" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Monad.Trans.Resource.runResourceT.\ (996 samples, 99.60%)</title><rect x="10.0" y="597" width="1175.3" height="15.0" fill="rgb(226,40,49)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="607.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Monad.Trans.Resource.runResourceT.\</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithToken (1 samples, 0.10%)</title><rect x="13.5" y="181" width="1.2" height="15.0" fill="rgb(226,205,53)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk.countChunkElements (34 samples, 3.40%)</title><rect x="1144.0" y="213" width="40.1" height="15.0" fill="rgb(245,162,46)" rx="2" ry="2" />
<text text-anchor="" x="1146.98" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Wor..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Dispatcher.dispatchWorker (993 samples, 99.30%)</title><rect x="13.5" y="341" width="1171.8" height="15.0" fill="rgb(242,155,1)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Dispatcher.dispatchWorker</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar.getSVar (955 samples, 95.50%)</title><rect x="13.5" y="293" width="1126.9" height="15.0" fill="rgb(246,151,37)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Append.getLifoSVar.getSVar</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Type.$mStream.\ (25 samples, 2.50%)</title><rect x="14.7" y="149" width="29.5" height="15.0" fill="rgb(250,125,52)" rx="2" ry="2" />
<text text-anchor="" x="17.72" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >St..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithToken (37 samples, 3.70%)</title><rect x="1140.4" y="293" width="43.7" height="15.0" fill="rgb(247,168,25)" rx="2" ry="2" />
<text text-anchor="" x="1143.44" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Stre..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChar.(...) (12 samples, 1.20%)</title><rect x="1126.3" y="133" width="14.1" height="15.0" fill="rgb(249,61,10)" rx="2" ry="2" />
<text text-anchor="" x="1129.28" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Type.workLoop (1 samples, 0.10%)</title><rect x="1184.1" y="293" width="1.2" height="15.0" fill="rgb(229,139,21)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.isSpace (6 samples, 0.60%)</title><rect x="1133.4" y="117" width="7.0" height="15.0" fill="rgb(234,90,28)" rx="2" ry="2" />
<text text-anchor="" x="1136.36" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.parseRequestBodyEx (1 samples, 0.10%)</title><rect x="10.0" y="277" width="1.2" height="15.0" fill="rgb(233,35,21)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processWithoutToken (929 samples, 92.90%)</title><rect x="44.2" y="261" width="1096.2" height="15.0" fill="rgb(251,200,12)" rx="2" ry="2" />
<text text-anchor="" x="47.22" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Streamly.Internal.Data.Stream.Channel.Append.processWithoutToken</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.processHeap.loopHeap.go (26 samples, 2.60%)</title><rect x="13.5" y="229" width="30.7" height="15.0" fill="rgb(243,158,48)" rx="2" ry="2" />
<text text-anchor="" x="16.54" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >St..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChunk.countChunkElements (25 samples, 2.50%)</title><rect x="14.7" y="85" width="29.5" height="15.0" fill="rgb(215,156,19)" rx="2" ry="2" />
<text text-anchor="" x="17.72" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Wo..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Servant.Server.serveWithContext (996 samples, 99.60%)</title><rect x="10.0" y="549" width="1175.3" height="15.0" fill="rgb(217,6,44)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="559.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Servant.Server.serveWithContext</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.wrapTillBound.go (1 samples, 0.10%)</title><rect x="10.0" y="101" width="1.2" height="15.0" fill="rgb(238,24,4)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Wai.Parse.parsePiecesEx (1 samples, 0.10%)</title><rect x="10.0" y="229" width="1.2" height="15.0" fill="rgb(227,52,10)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Streamly.Internal.Data.Stream.Channel.Append.workLoopAhead (1 samples, 0.10%)</title><rect x="1184.1" y="261" width="1.2" height="15.0" fill="rgb(243,191,40)" rx="2" ry="2" />
<text text-anchor="" x="1187.10" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>WordCount.processChar (46 samples, 4.60%)</title><rect x="1086.2" y="149" width="54.2" height="15.0" fill="rgb(253,178,48)" rx="2" ry="2" />
<text text-anchor="" x="1089.16" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >WordC..</text>
</g>
</svg>
